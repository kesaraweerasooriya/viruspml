// This file has been autogenerated using CoD4X 1.8 server. //
// If it contains wrong data, please create issue here:     //
//    https://github.com/callofduty4x/CoD4x_Server/issues   //
/*
	You can load your plugins in this script. (same as DR plugin system)
	
	// BraXi
	LoadPlugin( plugins\PLUGIN_SCRIPT::ENTRY_POINT, PLUGIN_NAME, PLUGIN_AUTHOR )

	PLUGIN_SCRIPT	- Script file name without ".gsc" extension, ex. "example"
	ENTRY_POINT		- Plugin function called once a round to load script, if you
					use 'main' mod will call function main( modVersion ) from plugin file
	PLUGIN_NAME		- Name of the plugin, fox example "Extreme DR"
	PLUGIN_AUTHOR	- Plugin author's name
	//
	

	You can use event system to assist you with writing your own scripts. Thread the following function from your plugin.
	
	eventHandler( EVENT_TYPE, FUNCTION )
	
	EVENT_TYPE		- The event that will trigger your function. Available options: "spawn", "connect", "death", "damage", "disconnect".
	
	FUNCTION		- Name of your function to run once the event is triggered. example "::onPlayerConnect". Note the "::" !
	
	full working example: "thread plugins\plugins::eventHandler( ::onPlayerSpawn, "spawn" )" - each spawning player will thread function "onPlayerSpawn"
	
	2 events return stuff you can use
	
	"damage" event: onPlayerDamage( eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, psOffsetTime )
	
	"death" event: onPlayerKilled( eInflictor, attacker, iDamage, sMeansOfDeath, sWeapon, vDir, sHitLoc, psOffsetTime, deathAnimDuration )
	
*/

init()
{
	//
	// loadPlugin( script, name, author );
	// loadPlugin( plugins\welcome::init, "Simple welcome", "Leiizko" );
	//
	
	if( level.leiizko_dvars[ "random_rotation" ] )
		loadPlugin( plugins\random::init, "Random Map Rotation", "Leiizko" );
	
}

loadPlugin( script, name, author )
{
	thread [[script]]();
	println( "Running ^5" + name + " ^7plugin by ^5" + author );
}

eventHandler( function, eventType )
{
	if( !isDefined( eventType ) || !isDefined( function ) )
		return;

	switch( eventType )
	{
		case "spawn":
			thread mickey\events::addSpawnEvent( function );
			break;
		case "connect":
			thread mickey\events::addConnectEvent( function );
			break;
		case "death":
			thread mickey\events::addDeathEvent( function );
			break;
		case "damage":
			thread mickey\events::addDamageEvent( function );
			break;
		case "disconnect":
			thread mickey\events::addDisconnectEvent( function );
			break;
		default:
			logPrint( "EventHandler ERROR: Unknown event type: " + eventType );
			break;
	}
}