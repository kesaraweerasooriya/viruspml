// This file has been autogenerated using CoD4X 1.8 server. //
// If it contains wrong data, please create issue here:     //
//    https://github.com/callofduty4x/CoD4x_Server/issues   //
/*===================================================================||
||/|¯¯¯¯¯¯¯\///|¯¯|/////|¯¯|//|¯¯¯¯¯¯¯¯¯|//|¯¯¯¯¯¯¯¯¯|//\¯¯\/////¯¯//||
||/|  |//\  \//|  |/////|  |//|  |/////////|  |//////////\  \///  ///||
||/|  |///\  \/|  |/////|  |//|  |/////////|  |///////////\  \/  ////||
||/|  |///|  |/|  |/////|  |//|   _____|///|   _____|//////\    /////||
||/|  |////  //|  \/////|  |//|  |/////////|  |/////////////|  |/////||
||/|  |///  ////\  \////  ////|  |/////////|  |/////////////|  |/////||
||/|______ //////\_______/////|__|/////////|__|/////////////|__|/////||
||===================================================================||
||     DO NOT USE, SHARE OR MODIFY THIS FILE WITHOUT PERMISSION      ||
||===================================================================*/

#include mickey2\_common;

init()
{
	level thread stratTime();
	//if((level.gametype != "sd" && level.gametype != "sab"))
		//addSpawnThread(::SpawnProtection);
	if(getDvar("g_gametype") == "sd")
		addSpawnThread(::SpawnAnimation);
}
//#############################################################################################################################################################
//#############################################################################################################################################################
//#############################################################################################################################################################
SpawnProtection() {
	time = 3;
	self endon("disconnect");
	self setHealth(200);
	text = addTextBackground( self, "Spawnprotection...0:00.0" , 0, 223.5, 1, "center", "middle", "center", "middle", 1.4 , 1000 );
	text.background fadeIn(.5);
	text fadeIn(.5);
	text.label = self getLangString("SPAWN_PROTECTION");
	text setTenthsTimer(time);
	text.glowColor = (0.0, 0.5, 1.0);
	text.glowAlpha = 1;
	for(i=0;i<time*20 && !self AttackButtonPressed() && self.sessionstate == "playing";i++) wait .05;
	text.background thread fadeOut(.5);	
	text thread fadeOut(.5);
	if(isDefined(self.inPredator) && !self.inPredator || !isDefined(self.inPredator)) {
		if ( level.hardcoreMode )
			self setHealth(30);
		else if ( level.oldschool )
			self setHealth(200);
		else
			self setHealth(100);
	}
}
//#############################################################################################################################################################
//#############################################################################################################################################################
//#############################################################################################################################################################
stratTime() {
	level.instrattime = true;
	level waittill("connected");
	if((level.gametype == "sd" || level.gametype == "sab") && game["roundsplayed"]) {
		time = 6;
	    visionSetNaked("mpIntro", 0);
	    matchStartText = addTextHud( level, 0, 0, 1, "center", "middle", "center", "middle", 1.4, 1001 );
	    matchStartText.font = "objective";
	    matchStartText setText(game["strings"]["match_starting_in"]);
		matchStartText.color = (0.172, 0.781, 1);
		matchStartTimer = [];
	    for(i=0;i<6;i++) {
		    matchStartTimer[i] = addTextHud( level, 0, 0, 1, "center", "middle", "center", "middle", 1.4, 1001 );
		    matchStartTimer[i].font = "objective";
		    matchStartTimer[i].degree = i*-30;
		    matchStartTimer[i] setValue(time - i);
		  	matchStartTimer[i] thread animate_circle_number(i*-30 + (30 * time),time);
		}
	   	for(i=0;i<time*10;i++) {
	   		players = getAllPlayers();
			for(k=0;k<players.size;k++) {
				players[k] setPlayerSpeed(0);
				//players[k] setClientDvar("cg_drawgun",0);
			}
	   		wait .1;
	   	}
	    visionSetNaked(getDvar("mapname"), 1);
	    matchStartText thread fadeOut(.5);
	    for(i=0;i<matchStartTimer.size;i++)
	    	matchStartTimer[i] thread fadeOut(.5);
	   	players = getAllPlayers();
		for(k=0;k<players.size;k++) {
			players[k] setPlayerSpeed();
			players[k] enableWeapons();
			//players[k] setClientDvar("cg_drawgun",1);
		}    
	}
	level notify("clock_over");
	level.instrattime = false;
}
animate_circle_number(degree, time) {
	w = 1 / getDvarInt("sv_fps");
	degree_step = (self.degree - degree) * (w/time) *-1;
	if( degree > self.degree ) 
		degree_step = (degree-self.degree) * (w/time);
	for(i=self.degree;isDefined(self);i+=degree_step) {
		if(i < 15 && i > -15)
			self.color = (0.172, 0.781, 1);
		else
			self.color = (1,1,1);
		self MoveOverTime(w);
		self.x = sin(i)*85;
		self.y = cos(i)*85;
		wait w;
	}
}
//#############################################################################################################################################################
//#############################################################################################################################################################
//#############################################################################################################################################################
SpawnAnimation() {
	self endon("disconnect");
	pos[0]["origin"] = self.origin + maps\mp\_utility::vector_scale(anglestoforward(self getPlayerAngles()+(80,0,0)), -1000 );
	pos[0]["angles"] = self getPlayerAngles()+(80,0,0);
	pos[1]["origin"] = self.origin + maps\mp\_utility::vector_scale(anglestoforward(self getPlayerAngles()+(45,0,0)), -100 );
	pos[1]["angles"] = self getPlayerAngles()+(45,0,0);
	pos[2]["origin"] = self.origin;
	pos[2]["angles"] = self getPlayerAngles();
	if(!game["roundsplayed"] || !isDefined(level.instrattime) || !level.instrattime) return;
	self thread BeginFlight(pos,30);
	self setClientDvar("cg_drawGun",0);
	self disableWeapons();
	self hide();
	wait 2;
	self setClientDvar("cg_drawGun",1);
	self waittill("flight_done");
	self show();
	wait 1;
	self enableWeapons();
}